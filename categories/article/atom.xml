<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - article</title>
	<link href="https://elsuizo.github.io/categories/article/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://elsuizo.github.io/"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-11-02T00:00:00+00:00</updated>
	<id>https://elsuizo.github.io/categories/article/atom.xml</id>
	<entry xml:lang="en">
		<title>Coleccion de snippets cools de Rust</title>
		<published>2021-11-02T00:00:00+00:00</published>
		<updated>2021-11-02T00:00:00+00:00</updated>
		<link href="https://elsuizo.github.io/coleccion-snippets-rust/" type="text/html"/>
		<id>https://elsuizo.github.io/coleccion-snippets-rust/</id>
		<content type="html">&lt;h1 id=&quot;los-mejores-snippets-de-rust&quot;&gt;Los mejores snippets de Rust&lt;a class=&quot;zola-anchor&quot; href=&quot;#los-mejores-snippets-de-rust&quot; aria-label=&quot;Anchor link for: los-mejores-snippets-de-rust&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Los siguientes snippets de codigo los fui recolectando a lo largo del poco tiempo
que llevo en el lenguaje. Su orden de aparicion no significa nada en ninguna
metrica, esto es solo exposicion de arte y elegancia.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;snippets-con-matches&quot;&gt;Snippets con &lt;code&gt;matches!&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#snippets-con-matches&quot; aria-label=&quot;Anchor link for: snippets-con-matches&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;El famoso macro &lt;code&gt;matches!&lt;&#x2F;code&gt; en accion:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.matches.html&quot;&gt;&lt;code&gt;matches doc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Foo {
    Bar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
    Baz
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;is_bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: Foo) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    matches!(foo, Foo::Bar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;is_bar_greather&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: Foo, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;thresold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    matches!(foo, Foo::Bar(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; thresold)
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Foo::Bar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; m2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Foo::Bar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; m3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Foo::Baz;
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{:}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;is_bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(m));
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{:}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;is_bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(m3));
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;is: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{:}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;is_bar_greather&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(m2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;snippets-con-match&quot;&gt;Snippets con &lt;code&gt;match&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#snippets-con-match&quot; aria-label=&quot;Anchor link for: snippets-con-match&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;El famoso &lt;code&gt;match&lt;&#x2F;code&gt; de Rust. Es una de las construcciones mas potentes del lenguaje
en mi humilde opinion. Lo podriamos catalogar como un &lt;code&gt;switch&lt;&#x2F;code&gt; pero mucho mas
poderoso.&lt;&#x2F;p&gt;
&lt;p&gt;El primer ejemplo es una implementacion del &lt;code&gt;trait&lt;&#x2F;code&gt; &lt;code&gt;TryFrom&lt;&#x2F;code&gt; para una &lt;code&gt;struct&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Color {
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Entonces con el siguiente codigo implementamos &lt;code&gt;TryFrom&lt;&#x2F;code&gt; para una &lt;code&gt;tupla&lt;&#x2F;code&gt; &lt;code&gt;(i16, i16, i16)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;La magia de esto es que en el lado del &lt;code&gt;pattern&lt;&#x2F;code&gt; que es siempre a la izquierda
de cada rama del &lt;code&gt;match&lt;&#x2F;code&gt; tenemos un alias el cual verifica si el valor esta
en un cierto rango (en este caso queremos que el valor entre en un &lt;code&gt;u8&lt;&#x2F;code&gt; por eso
el rango es &lt;code&gt;0..=255&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;TryFrom&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Color {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;Error = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Box&amp;lt;dyn error::Error&amp;gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;try_from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;i16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; tuple {
            (r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Ok(Color {
                red: r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
                green: g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
                blue: b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
            }),
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;_ =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Err(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;rgb must be 0~255&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()),
        }
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Podemos utilizar un &lt;code&gt;match&lt;&#x2F;code&gt; en la definicion de una variable ya que en el lenguaje
podemos usar cualquier expresion para ello. En el siguiente ejemplo usamos un &lt;code&gt;match&lt;&#x2F;code&gt;
para asignar los valores de cada color en una funcion que calcula el falso color
a una imagen:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#7f848e;&quot;&gt;&#x2F;&#x2F;&#x2F; False color of an image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;false_color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;pixel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: image::Rgb&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;gt;) -&amp;gt; image::Rgb&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;43.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pixel[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;43            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
        value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;44&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;86   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;86.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;87&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;172          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
        value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;173&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;215 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;173.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;216&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;MAX         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pixel[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] {
        value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;43    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;44&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;128          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
        value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;129&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;172 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;172.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;173&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;MAX         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; pixel[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;86            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
        value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;87&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;129  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;87.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;130&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;213         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
        value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;214&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;MAX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;255.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;),
    };

    image::Rgb([r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;snippets-de-notacion&quot;&gt;Snippets de notacion&lt;a class=&quot;zola-anchor&quot; href=&quot;#snippets-de-notacion&quot; aria-label=&quot;Anchor link for: snippets-de-notacion&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;En Rust podemos desestructurar casi cualquier expresion para nuestra conveniencia
por ejemplo queremos hacer una funcion que tome un array de tres elementos
y que sume el primer y el ultimo elemento:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;add_first_last&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;([x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, y]: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;; 3]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; y
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Supongamos que tenemos la siguiente &lt;code&gt;struct Foo&lt;&#x2F;code&gt;, tenemos un array de &lt;code&gt;Foo&lt;&#x2F;code&gt;s y
queremos iterar solo sobre los elementos &lt;code&gt;a&lt;&#x2F;code&gt; de cada &lt;code&gt;Foo&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Foo {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;str
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;}

&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; constructor de Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Foo {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{a, b, c}
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[Foo::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;one&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;two&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), Foo::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;two&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;tree&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;), Foo::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;37&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;l&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;pi&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)];

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; Foo{a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; data {
        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;a: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, a);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;El siguiente snippet lo vi en el siguiente blog(que les recomiendo)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;adventures.michaelfbryan.com&#x2F;posts&#x2F;daily&#x2F;slice-patterns&#x2F;?utm_source=user-forums&amp;amp;utm_medium=social&amp;amp;utm_campaign=daily-rust-slice-patterns&quot;&gt;&lt;code&gt;blog&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;word_is_palindrome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;word&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; letters: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; word.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;chars&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;is_palindrome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;letters)
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;is_palindrome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; items {
        [first, middle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ ..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, last] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; last &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&amp;amp; is_palindrome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(middle),
        [] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;,
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;is palindrome: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;word_is_palindrome&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;abbbba&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;));
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Utiliza patrones de &amp;quot;matcheo&amp;quot; y recursividad, notemos que cuando hacemos esto
sobre &lt;code&gt;slices&lt;&#x2F;code&gt; debemos tener en cuenta los casos de &lt;code&gt;slice&lt;&#x2F;code&gt; vacio &lt;code&gt;[]&lt;&#x2F;code&gt; y cualquier
otro valor con &lt;code&gt;[_]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;snippets-con-iteradores&quot;&gt;Snippets con iteradores&lt;a class=&quot;zola-anchor&quot; href=&quot;#snippets-con-iteradores&quot; aria-label=&quot;Anchor link for: snippets-con-iteradores&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Rust utiliza iteradores como elemento para iterar sobre colecciones de
elementos esto hace que por ejemplo el compilador sepa de antemano cuando debe
terminar la iteracion y asi no tener que realizar el chequeo en cada una de las
mismas como si pasa por ejemplo en &lt;code&gt;C&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;for(int i=0; i &amp;lt; 10; i++)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Por ejemplo supongamos que queremos implementar el producto punto para dos
vectores o arrays de cualquier &lt;code&gt;length&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;slice1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;slice2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;]) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
    slice1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(slice2).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(|(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)| a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; b).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;()
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= dot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;b);
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, result);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;snippets-con-alias&quot;&gt;Snippets con alias&lt;a class=&quot;zola-anchor&quot; href=&quot;#snippets-con-alias&quot; aria-label=&quot;Anchor link for: snippets-con-alias&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Desde la version 1.56 podemos combinar &amp;quot;bindings&amp;quot; &lt;code&gt;@&lt;&#x2F;code&gt; con &amp;quot;bindings&amp;quot; patrones o
sea que podemos darle un nombre a un type y a cierta parte de ello por ejemplo:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; array &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[first_element, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, last_element] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;];
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;array: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, array);
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;first_element: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, first_element);
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;last_element: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, last_element);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Donde le damos un nombre al array a su primer elemento y a su ultimo elemento
todo en la misma linea de codigo&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Monitor de obstaculos para ROS con Rust</title>
		<published>2021-07-31T00:00:00+00:00</published>
		<updated>2021-07-31T00:00:00+00:00</updated>
		<link href="https://elsuizo.github.io/ros-rust-monitor-obstaculos/" type="text/html"/>
		<id>https://elsuizo.github.io/ros-rust-monitor-obstaculos/</id>
		<content type="html">&lt;h1 id=&quot;monitoreando-obstaculos&quot;&gt;Monitoreando obstaculos&lt;a class=&quot;zola-anchor&quot; href=&quot;#monitoreando-obstaculos&quot; aria-label=&quot;Anchor link for: monitoreando-obstaculos&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Esta es una traduccion a Rust de una implementacion hecha en &lt;code&gt;Cpp&lt;&#x2F;code&gt; por Justin Huang&lt;&#x2F;p&gt;
&lt;p&gt;aqui les dejo el video:&lt;&#x2F;p&gt;
&lt;div &gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;2Cmdu6mkxD0&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Me parecio interesante porque es como un &amp;quot;hola mundo&amp;quot; un poco mas avanzado.
Ademas es una linda oportunidad para probar si podemos generar la misma
ergonomia con Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;definicion-del-problema&quot;&gt;Definicion del problema&lt;a class=&quot;zola-anchor&quot; href=&quot;#definicion-del-problema&quot; aria-label=&quot;Anchor link for: definicion-del-problema&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Tenemos nuestro robot que publica su posicion a traves del topic &lt;code&gt;&#x2F;odom&lt;&#x2F;code&gt; y
tenemos de antemano las posiciones de los obstaculos que estan en el mapa donde
transita el robot, entonces vamos a generar un nodo que monitorea cual es el
obstaculo mas cercano.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solucion-del-problema-en-cpp&quot;&gt;Solucion del problema en Cpp&lt;a class=&quot;zola-anchor&quot; href=&quot;#solucion-del-problema-en-cpp&quot; aria-label=&quot;Anchor link for: solucion-del-problema-en-cpp&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Para que podamos comparar las implementaciones, voy a poner aca la implementacion
en &lt;code&gt;Cpp&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;lt;vector&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;lt;string&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;ros&#x2F;ros.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;nav_msgs&#x2F;Odometry.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;location_monitor&#x2F;LandmarkDistance.h&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;using&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; location_monitor::LandmarkDistance;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Landmark {
   std::string name;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; x;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; y;
};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;LandmarkMonitor {
   std::vector&amp;lt;Landmark&amp;gt; landmarks;

   ros::Publisher landmark_publisher;

   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;LandmarkMonitor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; ros::Publisher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;landmark_pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;landmarks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;landmark_publisher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(landmark_pub) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;init_landmarks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
   }

   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;get_distance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(Landmark &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;landmark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; x;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; y;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(diff_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff_y);
   }

   LandmarkDistance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;find_closest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
      LandmarkDistance result;
      result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(size_t i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmarks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;i) {
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; Landmark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmarks[i];
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get_distance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(landmark, x, y);
         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;distance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;
            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; distance;
         }
      }
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; result;
   }

   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;OdomCallback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; nav_msgs::Odometry::ConstPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; msg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; msg-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;
      LandmarkDistance landmarkd_distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;find_closest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(x, y);
      landmark_publisher.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;publish&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(landmarkd_distance);
   }

   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;init_landmarks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
      landmarks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Landmark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;unit_box&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
      landmarks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Landmark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;unit_cylinder&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
      landmarks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Landmark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;unit_sphere&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;});
   }

};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;** &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;) {
   ros::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(argc, argv, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;location_monitor&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
   ros::NodeHandle node_handle;
   ros::Publisher landmark_publisher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; node_handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;advertise&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;lt;LandmarkDistance&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;closest_landmark&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
   LandmarkMonitor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;monitor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(landmark_publisher);
   ros::Subscriber subscriber &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; node_handle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;odom&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;LandmarkMonitor::OdomCallback, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;monitor);
   ros::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;spin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Esta implementacion es mas &amp;quot;sencilla&amp;quot; que la hecha por Huang ya que usa solo &lt;code&gt;structs&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;El robot que utilizo es el &lt;code&gt;turtlebot3&lt;&#x2F;code&gt; y el mapa es uno hecho a partir del mapa &lt;code&gt;empty&lt;&#x2F;code&gt;
al que le agregue un cilindro, una esfera y un box. En esta implementacion el
utiliza un mensaje custom al que llamamos &lt;code&gt;LandmarkDistance.msg&lt;&#x2F;code&gt; que esta definido
como:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;string name # este es al nombre que le asignamos a el landmark
float64 distance # esta es la distancia que nos separa del landmark
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ROS genera el codigo de la definicion de esos types y los pone en un archivo &lt;code&gt;.h&lt;&#x2F;code&gt;
al que accedemos con:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;#include &amp;quot;location_monitor&#x2F;LandmarkDistance.h&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hay que tener en cuenta que esto tiene que estar configurado en los archivos de
compilacion &lt;code&gt;package.xml&lt;&#x2F;code&gt; y &lt;code&gt;CMakeLists.txt&lt;&#x2F;code&gt; correctamente(si esto te parece chino
tenes que ver el tutorial oficial sobre mensajes)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementacion-en-rust&quot;&gt;Implementacion en Rust&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementacion-en-rust&quot; aria-label=&quot;Anchor link for: implementacion-en-rust&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;la implementacion en Rust es la siguiente:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; env_logger;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rosrust;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::Publisher;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;static_math::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;std::sync::mpsc;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;std::time::Duration;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust_msg::location_monitor::LandmarkDistance;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Landmark {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: V2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;gt;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Landmark {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: V2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{name, position}
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;LocationMonitor {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;landmarks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: Vec&amp;lt;Landmark&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;publisher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: Publisher&amp;lt;LandmarkDistance&amp;gt;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;LocationMonitor {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;publisher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: Publisher&amp;lt;LandmarkDistance&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmarks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;vec![Landmark::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;unit_box&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;::new_from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)),
                         Landmark::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;unit_cylinder&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;::new_from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)),
                         Landmark::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;unit_sphere&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;::new_from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;))];
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{landmarks, publisher}
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;get_distance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;landmark&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Landmark, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: V2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark.position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; point;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;::sqrt(diff[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; diff[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;])
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;find_closest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: V2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;&amp;gt;) -&amp;gt; LandmarkDistance {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; LandmarkDistance{name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(), distance: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;};
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;in &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.landmarks {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;::get_distance(landmark, point);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; result.distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; result.distance {
                result.name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
                result.distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; distance;
            }
        }
        result
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    env_logger::init();

    rosrust::init(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;location_monitor_rust&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(tx, rx) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;mpsc::channel();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark_publisher &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::publish(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;landmark_distance&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; monitor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;LocationMonitor::init(landmark_publisher);

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; NOTE(elsuizo:2021-07-21): nos subscribimos al topic &amp;quot;&#x2F;odom&amp;quot; y pasamos ese mensaje a traves
    &#x2F;&#x2F; del thread
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; subscriber_info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::subscribe(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;odom&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;msg: rosrust_msg::nav_msgs::Odometry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Callback for handling received messages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(msg).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::is_ok() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; NOTE(elsuizo:2021-07-21): esperamos la recepcion del mensaje
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Ok(msg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;recv_timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)) {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; msg.pose.pose.position.x;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; msg.pose.pose.position.y;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;::new_from(x, y);
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark_distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; monitor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;find_closest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(position);
            monitor.publisher.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(landmark_distance);
        }
    }

    rosrust::spin();
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Como dijimos nos subscribimos al topic &lt;code&gt;&#x2F;odom&lt;&#x2F;code&gt; con el que obtenemos la posicion
&lt;code&gt;(x, y)&lt;&#x2F;code&gt; del robot en el mapa con esta informacion calculamos la distancia con
respecto al conjunto de obstaculos y verificamos cual es el mas cercano. A esa
informacion la publicamos como un mensaje &lt;code&gt;LandmarkDistance&lt;&#x2F;code&gt; que definimos en
el codigo &lt;code&gt;Cpp&lt;&#x2F;code&gt;. Notemos que la implementacion de Rust genera tambien el codigo
necesario para esas definiciones sin que tengamos que hacer nada, solo la importamos
con la linea de codigo:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;use rosrust_msg::location_monitor::LandmarkDistance;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Y como todo lo que definimos tiene su type bien establecido podemos incorporarlo
al codigo sin problemas:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;LocationMonitor {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;landmarks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: Vec&amp;lt;Landmark&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;publisher&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: Publisher&amp;lt;LandmarkDistance&amp;gt;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Una de las particularidades de la implementacion en Rust es que debemos utilizar
threads para compartir informacion y dado que el lenguaje nos garantiza que es
seguro no debemos preocuparnos por cosas que pasan en otros lenguajes como por
ejemplo &lt;code&gt;data races&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; subscriber_info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::subscribe(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;odom&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;msg: rosrust_msg::nav_msgs::Odometry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Callback for handling received messages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;  tx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(msg).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
})
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Aqui enviamos el &lt;code&gt;msg&lt;&#x2F;code&gt; a traves de un thread cada vez que recibimos el mismo en
el topic &lt;code&gt;&#x2F;odom&lt;&#x2F;code&gt;. Como contrapartida hacemos la recepcion de manera segura con&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;Ok(msg) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;recv_timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;)) {
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; msg.pose.pose.position.x;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; msg.pose.pose.position.y;
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; position &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;V2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;::new_from(x, y);
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; landmark_distance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; monitor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;find_closest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(position);
   monitor.publisher.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(landmark_distance);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;donde hacemos el llamado a los metodos que nos permiten calcular y publicar cual
es el obstaculo que esta mas cerca.&lt;&#x2F;p&gt;
&lt;p&gt;Por ultimo podemos ver todo esto en accion en el siguiente video. Saludos!!!&lt;&#x2F;p&gt;
&lt;div &gt;
    &lt;iframe
        src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;r3a2wXH-0N0&quot;
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen&gt;
    &lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Hola mundo con ROS y Rust</title>
		<published>2021-07-25T00:00:00+00:00</published>
		<updated>2021-07-25T00:00:00+00:00</updated>
		<link href="https://elsuizo.github.io/ros-rust/" type="text/html"/>
		<id>https://elsuizo.github.io/ros-rust/</id>
		<content type="html">&lt;h1 id=&quot;como-empezar-con-ros-y-rust&quot;&gt;Como empezar con ROS y Rust&lt;a class=&quot;zola-anchor&quot; href=&quot;#como-empezar-con-ros-y-rust&quot; aria-label=&quot;Anchor link for: como-empezar-con-ros-y-rust&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Si comenzar con ROS ya tiene algunas dificultades porque como se dice
vulgarmente tienen que estar todos los patitos en fila(&lt;code&gt;CMakes&lt;&#x2F;code&gt;, &lt;code&gt;package.xml&lt;&#x2F;code&gt;,
dependencias, workpace de catkin, ...etc) entonces comenzar con ROS y Rust aun
mas porque ni bien empezas te preguntas pero como integro mi nodo de Rust(hecho
con &lt;code&gt;cargo&lt;&#x2F;code&gt;) a un projecto de catkin(que usa &lt;code&gt;CMake&lt;&#x2F;code&gt;)???&lt;&#x2F;p&gt;
&lt;p&gt;Bueno no te preocupes hice una herramienta:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;ros-project-generator&quot;&gt;&lt;code&gt;ros-project-generator&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;que te genera los nodos de ROS hechos
con Rust(hecho con &lt;code&gt;cargo&lt;&#x2F;code&gt;) y que se comporta como un nodo &amp;quot;normal&amp;quot; de otro
lenguaje como &lt;code&gt;python&lt;&#x2F;code&gt; o &lt;code&gt;Cpp&lt;&#x2F;code&gt;, osea genera los nodos y todos los archivos que
se necesitan para que compilen con &lt;code&gt;CMake&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;La herramienta se instala como un &lt;em&gt;subcommand&lt;&#x2F;em&gt; de &lt;code&gt;cargo&lt;&#x2F;code&gt; haciendo simplemente:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo install ros-project-generator&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Una vez instalado solo necesitamos un archivo de configuracion &lt;code&gt;config.yaml&lt;&#x2F;code&gt; en
nuestro &lt;em&gt;workspace&lt;&#x2F;em&gt; de &lt;code&gt;catkin&lt;&#x2F;code&gt; como este:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#7f848e;&quot;&gt;# define a name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;project_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;navigation-robot&amp;quot;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f848e;&quot;&gt;# define a version
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.0.1

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f848e;&quot;&gt;# define the packages names
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;:
   - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;listener
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;talker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Donde se definen el nombre del conjunto de nodos(&lt;code&gt;project_name&lt;&#x2F;code&gt;), la version y
la lista de nodos que queremos crear. Luego solo hacemos(siempre en la carpeta
donde esta el archivo de configuracion):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo ros-project-generator&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Si todo salio bien vamos a obtener un mensaje como:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;navigation-robot project generated!!!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ahora que tenemos generados los nodos, deberian aparecer dentro de la carpeta
&lt;code&gt;src&lt;&#x2F;code&gt; en este caso como generamos dos nodos nos deberian aparecer &lt;code&gt;listener&lt;&#x2F;code&gt; y
&lt;code&gt;talker&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ahora para completar este &lt;code&gt;hola mundo&lt;&#x2F;code&gt; de ROS deberiamos hacer que el nodo &lt;code&gt;talker&lt;&#x2F;code&gt;
publique &amp;quot;Hola mundo&amp;quot; en un topic que le asignemos por ejemplo &lt;code&gt;&amp;quot;chatter&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Para ello necesitamos las siguientes lineas de codigo:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; env_logger;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rosrust;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    env_logger::init();

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Initialize node
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::init(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;talker&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Create publisher
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; chatter_pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::publish(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;chatter&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; log_names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::param(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;~log_names&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Create object that maintains 10Hz between sleep requests
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::rate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Breaks when a shutdown signal is sent
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::is_ok() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Create string message
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust_msg::std_msgs::String::default();
        msg.data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hello world from rosrust &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, count);

        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Log event
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::ros_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Publishing: {}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, msg.data);

        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Send string message to topic via publisher
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        chatter_pub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(msg).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; log_names {
            rosrust::ros_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Subscriber names: {:?}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, chatter_pub.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;subscriber_names&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;());
        }

        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Sleep to maintain 10Hz rate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;        rate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();

        count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Luego para el nodo &lt;code&gt;listener&lt;&#x2F;code&gt; debemos hacer que el mismo se subscriba al topic
que esta publicando el nodo anterior y asi completar este &amp;quot;Hola mundo&amp;quot;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; env_logger;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rosrust;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    env_logger::init();

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Initialize node
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::init(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;listener&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Create subscriber
    &#x2F;&#x2F; The subscriber is stopped when the returned object is destroyed
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; subscriber_info &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::subscribe(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;chatter&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, |&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#e06c75;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;: rosrust_msg::std_msgs::String| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Callback for handling received messages
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::ros_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Received: {}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, v.data);
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; log_names &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::param(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;~log_names&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; log_names {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; rate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::rate(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::is_ok() {
            rosrust::ros_info&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Publisher uris: {:?}&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;, subscriber_info.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;publisher_uris&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;());
            rate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;();
        }
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#7f848e;&quot;&gt;&#x2F;&#x2F; Block the thread until a shutdown signal is received
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;rosrust::spin();
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Si todo salio bien vamos a poder compilar nuestros nodos con el comando de siempre
que es(asumiendo que estamos usando &lt;code&gt;catkin&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;catkin_make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Si todo ha compilado sin errores tenemos ahora entonces los ejecutables de cada
uno de los nodos disponibles para que podamos ejecutarlos, osea que podemos hacer&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;rosrun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; listener listener
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;y en otra terminal el otro nodo:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;rosrun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; talker talker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Para obtener nuestro preciado &lt;code&gt;Hello World!!!&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p class=&quot;gif&quot;&gt;
  &lt;img src=&quot;.&amp;#x2F;hola_mundo.png&quot;&#x2F;&gt;
&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Primeros pasos con Rust</title>
		<published>2021-07-24T00:00:00+00:00</published>
		<updated>2021-07-24T00:00:00+00:00</updated>
		<link href="https://elsuizo.github.io/rust-principiante/" type="text/html"/>
		<id>https://elsuizo.github.io/rust-principiante/</id>
		<content type="html">&lt;h3 id=&quot;presentacion-de-rust&quot;&gt;Presentacion de Rust&lt;a class=&quot;zola-anchor&quot; href=&quot;#presentacion-de-rust&quot; aria-label=&quot;Anchor link for: presentacion-de-rust&quot;&gt;ðŸ”—&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Rust es un lenguaje de programacion particular que viene a solucionar un
problema que existe desde hace mucho tiempo con el manejo de memoria seguro
y eficiente.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Es seguro: Porque el compilador y el diseÃ±o del lenguaje no permite que el programador
cometa los errores clasicos de manejo de memoria(punteros colgados, dobles frees,
buffer overflow...etc)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;ES eficiente: Porque para lograr lo anterior no utiliza ningun &amp;quot;runtime&amp;quot;(como Java)
o GC(&amp;quot;Garbage collector&amp;quot;) por lo que hace que el codigo generado sea super
eficiente(poco consumo de memoria, excelente generacion de codigo maquina)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Al ser un lenguaje relativamente nuevo toma las preferencias y lecciones aprendidas
por la industria del software en cuanto a diseÃ±o, por ejemplo esta mas orientado
a los datos (&amp;quot;data oriented&amp;quot;) que a la programacion con objetos. Tambien su diseÃ±o
se vio muy influenciado por lenguajes funcionales, teniendo un gran soporte para
ese paradigma de programacion.&lt;&#x2F;p&gt;
&lt;p&gt;Como comenzar???. Bueno primero necesitamos instalar el compilador y el &lt;em&gt;package mannager&lt;&#x2F;em&gt;
que se llama &lt;code&gt;cargo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Vamos a la pagina del lenguaje:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;&lt;code&gt;pagina oficial de Rust&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;vamos a la la pestaÃ±a &amp;quot;get started&amp;quot; ---&amp;gt; &amp;quot;installing Rust&amp;quot; y ahi seguimos los
pasos(segun el Sistema operativo que tengamos)&lt;&#x2F;p&gt;
&lt;p&gt;Si todo salio bien debemos tener disponible los siguientes comandos en nuestro
sistema:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cargo&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ahora hagamos nuestro primer programa en Rust. Obviamente y para seguir la tradicion
el famoso hola mundo!!!.&lt;&#x2F;p&gt;
&lt;p&gt;Primero creamos el proyecto con la herramienta &lt;code&gt;cargo&lt;&#x2F;code&gt; haciendo en la carpeta
donde queremos tener el mismo:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;cargo new hola-rust&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Si todo fue bien obtenemos el mensaje:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Created binary (application) &lt;&#x2F;code&gt;hola-rust&lt;code&gt; package&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;en la misma tenemos los siguientes archivos:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;.
â”œâ”€â”€ Cargo.toml
â””â”€â”€ src
    â””â”€â”€ main.rs

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Donde:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;: Es el archivo de configuracion del &lt;em&gt;package mannager&lt;&#x2F;em&gt; donde podemos
manejar las dependencias de nuestro proyecto, banderas para la compilacion, ...etc&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;main.rs&lt;&#x2F;code&gt;: En este archivo vamos a escribir nuestro hola mundo, como ya viene
casi listo solo tenemos que modificar la &lt;code&gt;String&lt;&#x2F;code&gt; (en realidad es un &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;)
que esta entre &amp;quot;&amp;quot; y poner el mensaje en nuestro idioma(aunque no estoy de acuerdo
de programar en espaÃ±ol...solo por esta vez)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Hola Mundo!!!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Y para correr el codigo solo tenemos que hacer:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt; run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Quien dijo que Rust era dificil ???. Saludos&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Tutorial 1</title>
		<published>2021-07-24T00:00:00+00:00</published>
		<updated>2021-07-24T00:00:00+00:00</updated>
		<link href="https://elsuizo.github.io/rust-principiante/tutorial1/" type="text/html"/>
		<id>https://elsuizo.github.io/rust-principiante/tutorial1/</id>
		<content type="html">&lt;h3 id=&quot;primeros-pasos-con-el-lenguaje&quot;&gt;Primeros pasos con el lenguaje&lt;&#x2F;h3&gt;
&lt;p&gt;Como todos los lenguajes de programacion&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;() {
    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#abb2bf;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</content>
	</entry>
</feed>
